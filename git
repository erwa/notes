# Add remote branch
git remote add upstream git://github.com/user/repo.git

# git pull remote branch
git pull upstream master // git pull latest from upstream master
git pull <remote> <src>:<dest>

# create and push to remote branch from local branch
git push <remote> <local branch>:<remote branch>
git push upstream junit-runner:master
git push origin initial-queries:initial-queries

# set upstream branch
git branch --set-upstream <local-branch> <remote>/<remote-branch>

# git push one branch
git push <remote> <branch>

# A git tag refers to a specific commit and does not change.
# To pull git tag
git pull -t

# git: checkout remote branch and have local branch track it
git checkout -b li-0.10-1 origin/li-0.10-1

# git delete remote branch
git push origin --delete initial-queries

# git remove stale remote branches from local cache
git remote prune <remote>

# rename git branch
git branch -m old_branch_name new_branch_name

# git merge branch, will fast forward by default
git merge <branch> # merges <branch> into current branch

# git: checkout old commit
git checkout HEAD~5 # checkout 5 commits ago
git checkout COMMIT_HASH # checkout at specific commit

# if you're in a detached HEAD state and want to get back on a branch, do
git checkout <branch>

# git remove untracked files
git clean -f [-d]
# -d removes untracked directories, too

# git: uncommit last commit but keep changes in staging
git reset --soft HEAD^

# git show changes in commit
git show <commit-hash>

# Modify a git commit message
# Changes the most recent commit message
git commit --amend -m "New commit message"

git stash save "name"
git stash apply stash^{/name} # Doesn't seem to work anymore
git stash apply stash@{0} # where 0 is a number (do git stash list first)

# git pull rebase rather than merge
git pull --rebase

# git rename branch
git branch -m <newname>

# To reorder commits in git
git rebase -i HEAD~2 # reorder last two commits

# To rebase and replay local commits on another branch
git rebase <branch>
git rebase <remote>/<branch>

# Rebase on top of a specific commit
git rebase -i COMMIT_HASH

# git push problems
Try changing URL from HTTPS to SSH. Try including/excluding https:// or ssh://. Try adding or removing USERNAME@. Try using git@.

# git: comparing a file between two branches
git diff BRANCH1 BRANCH2 FILE

# git diff file that has been moved
git diff  6fab939e28486ab6e6d5038f33f5e9c3b406d4e1:ql/src/java/org/apache/hadoop/hive/ql/exec/MapRedTask.java ql/src/java/org/apache/hadoop/hive/ql/exec/mr/MapRedTask.java

# git diff one file
git diff <commit1> <commit2> <file>
git diff HEAD~1 HEAD <file>

# git diff, only show files changed
git diff --stat f57ea64

# git binary diff
git diff --binary

# GitHub pull requests: http://stackoverflow.com/questions/14680711/how-to-do-a-github-pull-request

# git apply commit from one branch on another
git cherry-pick HASH
git pull <remote> <branch>
# to pull from another local branch, push it to remote and then pull from remote

# git apply commit from one repo to another
# http://stackoverflow.com/questions/3816040/git-apply-changes-introduced-by-commit-in-one-repo-to-another-repo
/path/to/1 $ git format-patch sha1^..sha1
/path/to/1 $ cd /path/to/2
/path/to/2 $ git am /path/to/1/0001-…-….patch

# revert a commit
git revert <commit_hash>

# recover squashed commits, etc.
# http://stackoverflow.com/questions/7457942/how-to-undo-a-git-merge-squash
git reflog
git reset <commit>

# HEAD vs. working tree vs. index
http://stackoverflow.com/questions/3689838/difference-between-head-working-tree-index-in-git

# HEAD^ vs. HEAD~1
# HEAD^ is short for HEAD^1 and means the first parent of HEAD
# HEAD~n means to go back n commits from HEAD, favoring the first parent in cases of ambiguity
http://stackoverflow.com/questions/1955985/what-does-the-caret-character-mean

On Windows, git looks for ~/.ssh/id_rsa to use as your SSH key

# After installing the side-by-side diff tool "meld", you can do
git difftool <commit_hash1>..<commit_hash2>
# however, this compares files one by one
# It's often easier to fit to a
git reset --soft HEAD~<number>
# and then do a
meld .
# which will open all the files at once

# remove file from repo but keep locally
git rm --cached <files...>